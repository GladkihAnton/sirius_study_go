package gouroutine

import (
	"fmt"
	"strings"
	"unicode"
)

type counter map[string]int
type chResult struct {
	word  string
	count int
}

// countDigitsInWords считает количество цифр в словах фразы
func countDigitsInWords(phrase string) counter {
	words := strings.Fields(phrase)
	counted := make(chan chResult)

	stats := make(counter)

	// (1)
	go func() {
		for _, word := range words {
			counted <- chResult{word, countDigits(word)} // (3)
		}
	}()
	for i := 0; i < len(words); i++ {
		result := <-counted // (2)
		stats[result.word] = result.count
	}
	return stats
}

// countDigits возвращает количество цифр в строке
func countDigits(str string) int {
	count := 0
	for _, char := range str {
		if unicode.IsDigit(char) {
			count++
		}
	}
	return count
}

// printStats печатает слова и количество цифр в каждом
func printStats(stats counter) {
	for word, count := range stats {
		fmt.Printf("%s: %d\n", word, count)
	}
}

func MainTask() {
	phrase := "0ne 1wo thr33 4068 1231"
	stats := countDigitsInWords(phrase)
	printStats(stats)
}
